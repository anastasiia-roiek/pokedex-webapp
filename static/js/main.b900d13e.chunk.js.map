{"version":3,"sources":["components/Header/Header.jsx","components/Card/Card.jsx","components/PokeInfo/PokeInfo.jsx","components/LoadMoreButton/LoadMoreButton.jsx","components/MainPage/MainPage.jsx","App.jsx","index.jsx"],"names":["Header","className","src","alt","Card","React","memo","pokemon","infoPokemon","useState","pokeInfo","setPokeInfo","handleInfoPokemon","useCallback","useEffect","a","fetch","url","response","ok","Error","status","json","pokeData","fetchPokemonData","onClick","role","tabIndex","sprites","front_default","name","types","map","typeData","type","slot","PokeInfo","data","showInfo","setShowInfo","isSelected","setIsSelected","setTimeout","charAt","toUpperCase","slice","abilities","ability","stats","stat","base_stat","join","LoadMoreButton","MainPage","pokemons","setPokemons","selectedTypes","setSelectedTypes","allTypes","setAllTypes","loadedPokemonsCount","setLoadedPokemonsCount","totalPokemons","setTotalPokemons","getCharacters","axios","get","results","count","fetchCharacters","fetchTypes","getPokemonsByTypes","length","typePromises","Promise","all","responses","typePokemons","commonPokemons","reduce","prev","current","filter","some","p","handleTypeChange","event","target","value","isChecked","checked","prevTypes","t","loadMorePokemons","newPokemons","prevPokemons","prevCount","htmlFor","id","includes","onChange","poke","App","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b900d13e.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      {/* <h1 className=\"header_title\">\n        Pokedex\n      </h1> */}\n      <img\n        src=\"https://archives.bulbagarden.net/media/upload/4/4b/Pok%C3%A9dex_logo.png\"\n        alt=\"Pokedex\"\n        className=\"header_logo\"\n      />\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport './Card.scss';\n\nconst Card = React.memo(({ pokemon, infoPokemon }) => {\n  const [pokeInfo, setPokeInfo] = useState(null);\n\n  const handleInfoPokemon = React.useCallback(() => {\n    infoPokemon(pokeInfo);\n  }, [infoPokemon, pokeInfo]);\n\n  useEffect(() => {\n    const fetchPokemonData = async () => {\n      try {\n        const response = await fetch(pokemon.url);\n\n        if (!response.ok) {\n          throw new Error(`Network response was not ok. Status: ${response.status}`);\n        }\n\n        const pokeData = await response.json();\n\n        setPokeInfo(pokeData);\n      } catch (error) {\n        throw new Error('Something went wrong');\n      }\n    };\n\n    fetchPokemonData();\n  }, [pokemon.url]);\n\n  return (\n    /* eslint-disable-next-line jsx-a11y/click-events-have-key-events */\n    <div className=\"card\" onClick={handleInfoPokemon} role=\"button\" tabIndex=\"0\">\n      {pokeInfo && (\n        <div className=\"card_info\">\n          <img className=\"card_image\" src={pokeInfo.sprites.front_default} alt=\"\" />\n          <h2 className=\"card_title\">{pokemon.name}</h2>\n          <div className=\"card_types\">\n            {pokeInfo.types.map((typeData) => (\n              <span\n                key={typeData.slot}\n                className={`card_type type-${typeData.type.name}`}\n              >\n                {typeData.type.name}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nexport default Card;\n","import React, { useEffect, useState } from 'react';\nimport './PokeInfo.scss';\n\nconst PokeInfo = React.memo(({ data }) => {\n  const [showInfo, setShowInfo] = useState(false);\n  const [isSelected, setIsSelected] = useState(true);\n\n  useEffect(() => {\n    if (data) {\n      setIsSelected(false);\n      setTimeout(() => {\n        setShowInfo(true);\n      }, 300);\n    }\n  }, [data]);\n\n  return (\n    <>\n      {isSelected ? (\n        <p>Select a Pokemon</p>\n      ) : (\n        <>\n          {data && (\n            <div className={`poke-info ${showInfo ? 'show' : ''}`}>\n              <h1 className=\"poke-name\">{data.name.charAt(0).toUpperCase() + data.name.slice(1)}</h1>\n              <img src={data.sprites.front_default} alt=\"\" className=\"poke-image\" />\n              <div className=\"abilities\">\n                <h2 className=\"abilities-title\">Abilities:</h2>\n                <ul className=\"abilities-list\">\n                  {data.abilities.map((ability) => (\n                    <li key={ability.ability.name} className=\"ability-item\">\n                      {ability.ability.name}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n              <div className=\"base-stat\">\n                <table className=\"base-stat-table\">\n                  <thead>\n                    <tr>\n                      <th>Stat</th>\n                      <th>Value</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {data.stats.map((stat) => (\n                      <tr key={stat.stat.name} className=\"base-stat-row\">\n                        <td className=\"stat-name\">{stat.stat.name.charAt(0).toUpperCase() + stat.stat.name.slice(1)}</td>\n                        <td className=\"stat-value\">{stat.base_stat}</td>\n                      </tr>\n                    ))}\n                    <tr>\n                      <td className=\"stat-name\">Type</td>\n                      <td className=\"stat-value\">\n                        {data.types.map((type) => type.type.name).join(', ')}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n});\n\nexport default PokeInfo;\n","import React from 'react';\nimport './LoadMoreButton.scss';\n\nconst LoadMoreButton = ({ onClick }) => {\n  return (\n    <button\n      className=\"button\"\n      onClick={onClick}\n      type=\"button\"\n    >\n      Load More\n    </button>\n  );\n};\n\nexport default LoadMoreButton;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from '../Header/Header';\nimport Card from '../Card/Card';\nimport PokeInfo from '../PokeInfo/PokeInfo';\nimport LoadMoreButton from '../LoadMoreButton/LoadMoreButton';\nimport './MainPage.scss';\n\nconst MainPage = () => {\n  const [pokeInfo, setPokeInfo] = useState('');\n  const [pokemons, setPokemons] = useState([]);\n  const [selectedTypes, setSelectedTypes] = useState([]);\n  const [allTypes, setAllTypes] = useState([]);\n  const [loadedPokemonsCount, setLoadedPokemonsCount] = useState(16);\n  const [totalPokemons, setTotalPokemons] = useState(0);\n\n  const getCharacters = async () => {\n    try {\n      const response = await axios.get('https://pokeapi.co/api/v2/pokemon/');\n\n      return response.data;\n    } catch (error) {\n      throw new Error('Something went wrong');\n    }\n  };\n\n  useEffect(() => {\n    const fetchCharacters = async () => {\n      const data = await getCharacters();\n\n      setPokemons(data.results);\n      setTotalPokemons(data.count);\n    };\n\n    fetchCharacters();\n\n    const fetchTypes = async () => {\n      const response = await axios.get('https://pokeapi.co/api/v2/type');\n\n      setAllTypes(response.data.results);\n    };\n\n    fetchTypes();\n  }, []);\n\n  const getPokemonsByTypes = async () => {\n    if (selectedTypes.length === 0) {\n      const data = await getCharacters();\n\n      setPokemons(data.results);\n      setTotalPokemons(data.count);\n\n      return;\n    }\n\n    try {\n      const typePromises = selectedTypes.map(type => axios.get(`https://pokeapi.co/api/v2/type/${type}`));\n      const responses = await Promise.all(typePromises);\n      const typePokemons = responses\n        .map(response => response.data.pokemon.map(pokemon => pokemon.pokemon));\n\n      const commonPokemons = typePokemons\n        .reduce((prev, current) => prev\n          .filter(pokemon => current.some(p => p.name === pokemon.name)));\n\n      setPokemons(commonPokemons);\n    } catch (error) {\n      throw new Error('Something went wrong');\n    }\n  };\n\n  const handleTypeChange = (event) => {\n    const type = event.target.value;\n    const isChecked = event.target.checked;\n\n    if (isChecked) {\n      setSelectedTypes(prevTypes => [...prevTypes, type]);\n    } else {\n      setSelectedTypes(prevTypes => prevTypes.filter(t => t !== type));\n    }\n  };\n\n  const loadMorePokemons = async () => {\n    try {\n      const response = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${loadedPokemonsCount}&limit=16`);\n      const newPokemons = response.data.results;\n\n      setPokemons(prevPokemons => [...prevPokemons, ...newPokemons]);\n      setLoadedPokemonsCount(prevCount => prevCount + 16);\n    } catch (error) {\n      throw new Error('Something went wrong');\n    }\n  };\n\n  useEffect(() => {\n    getPokemonsByTypes();\n  }, [selectedTypes, loadedPokemonsCount]);\n\n  return (\n    <div className=\"container\">\n      <Header />\n\n      <div className=\"container-content\">\n        <div className=\"container_left-content\">\n          <div className=\"type-filter\">\n            {allTypes.map((type) => (\n              <label htmlFor={`type-${type.name}`} key={type.name} className={`type-filter__label ${type.name}`}>\n                <div className=\"type-filter__checkbox-label\">\n                  <input\n                    type=\"checkbox\"\n                    id={`type-${type.name}`}\n                    value={type.name}\n                    checked={selectedTypes.includes(type.name)}\n                    onChange={handleTypeChange}\n                  />\n                  <span className=\"type-filter__checkbox\"></span>\n                  {type.name.charAt(0).toUpperCase() + type.name.slice(1)}\n                </div>\n              </label>\n            ))}\n          </div>\n\n          {pokemons.slice(0, loadedPokemonsCount).map((pokemon) => (\n            <Card key={pokemon.name} pokemon={pokemon} infoPokemon={poke => setPokeInfo(poke)} />\n          ))}\n\n          {loadedPokemonsCount < totalPokemons\n            ? <LoadMoreButton onClick={loadMorePokemons} /> : null}\n        </div>\n\n        <div className=\"container_right-content\">\n          <PokeInfo data={pokeInfo} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/MainPage/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}